<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
<channel>
        <title>si dimentica subito</title>
        <description>si dimentica subito - croissant</description>
        <link></link>
        <link></link>
        <lastBuildDate>2015-11-15T17:21:31+09:00</lastBuildDate>
        <pubDate>2015-11-15T17:21:31+09:00</pubDate>
        <ttl>1800</ttl>


        <item>
                <title>Blowfish暗号化・復号 PHP - Ruby間</title>
                <description>&lt;p&gt;あるシステムで暗号化したものを他のシステムで復号する、
というパターンはありがちなのですが…&lt;/p&gt;

&lt;p&gt;昔やったことがあるから大丈夫と高をくくっていたら、
とても面倒なことになりました。&lt;/p&gt;

&lt;p&gt;今回は暗号化をPHPで行い、復号をrubyで行うパターンでした。&lt;/p&gt;

&lt;p&gt;暗号アルゴリズムはBlowfishですが、
これもいくつかやり方があり、正直言って正確なところは掴みきれていない印象です。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;暗号・復号の前提&lt;/h2&gt;

&lt;p&gt;Blowfishで暗号化する際、使用するのは以下のものです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;暗号化する対象のテキスト&lt;/li&gt;
  &lt;li&gt;パスフレーズ&lt;/li&gt;
  &lt;li&gt;初期化ベクトル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;暗号化の対象については、これがないと始まりませんので割愛して、
パスフレーズはいわゆるパスワード(キーとも表現されていますが)です。&lt;/p&gt;

&lt;p&gt;初期化ベクトルは、
&lt;a href=&quot;https://ja.wikipedia.org/wiki/%E5%88%9D%E6%9C%9F%E5%8C%96%E3%83%99%E3%82%AF%E3%83%88%E3%83%AB&quot;&gt;Wikipediaの説明&lt;/a&gt;
がありますが、
同じテキストを同じパスフレーズで暗号化したものでも、
毎回違った結果になるようにするためのもののようです。&lt;/p&gt;

&lt;p&gt;そして、Blowfishにはモードがいくつかあり、
大抵のサンプルにあるのはECBかCBCです。&lt;/p&gt;

&lt;p&gt;ECBでは初期化ベクトルは不要ですが、
CBCでは必須になっています。&lt;/p&gt;

&lt;p&gt;これは暗号強度に関わってくるものなので、
ここではCBCを使用することにしました。&lt;/p&gt;

&lt;h2 id=&quot;phpblowfish&quot;&gt;PHPでのBlowfish暗号化&lt;/h2&gt;

&lt;p&gt;PHPで暗号化する場合、拡張モジュールMCryptを使用することが多いと思います。
Blowfishの場合は、PEARライブラリCrypt_Blowfishを用いることもできます(かなり古いですが)。&lt;/p&gt;

&lt;p&gt;以下、コマンドラインで実行するサンプルです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;encrypt.php&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;#!/usr/bin/env php
&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;define&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PASSPHRASE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;passphrase-test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;);
{
    &lt;span style=&quot;color:#950&quot;&gt;$opt&lt;/span&gt; = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;getopt&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t:&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (!&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;isset&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$opt&lt;/span&gt;[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])) {
        &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;exit&lt;/span&gt;(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;);
    }

    &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt; = &lt;span style=&quot;color:#950&quot;&gt;$opt&lt;/span&gt;[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;];
    &lt;span style=&quot;color:#777&quot;&gt;// PKCS#5 Padding&lt;/span&gt;
    &lt;span style=&quot;color:#950&quot;&gt;$pkcs5_pad&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$blocksize&lt;/span&gt;) {
        &lt;span style=&quot;color:#950&quot;&gt;$pad&lt;/span&gt; = &lt;span style=&quot;color:#950&quot;&gt;$blocksize&lt;/span&gt; - (&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;strlen&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;) % &lt;span style=&quot;color:#950&quot;&gt;$blocksize&lt;/span&gt;);
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt; . &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;str_repeat&lt;/span&gt;(&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;chr&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$pad&lt;/span&gt;), &lt;span style=&quot;color:#950&quot;&gt;$pad&lt;/span&gt;);
    };

    &lt;span style=&quot;color:#950&quot;&gt;$mc&lt;/span&gt;   = mcrypt_module_open(&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MCRYPT_BLOWFISH&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;MCRYPT_MODE_CBC&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$is&lt;/span&gt;   = mcrypt_enc_get_iv_size(&lt;span style=&quot;color:#950&quot;&gt;$mc&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$iv&lt;/span&gt;   = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;substr&lt;/span&gt;(&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;sha1&lt;/span&gt;(&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;uniqid&lt;/span&gt;()), &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$is&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$ks&lt;/span&gt;   = mcrypt_enc_get_key_size(&lt;span style=&quot;color:#950&quot;&gt;$mc&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$key&lt;/span&gt;  = &lt;span style=&quot;color:#950&quot;&gt;$pkcs5_pad&lt;/span&gt;(&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;PASSPHRASE&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$ks&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$bs&lt;/span&gt;   = mcrypt_enc_get_block_size(&lt;span style=&quot;color:#950&quot;&gt;$mc&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt; = &lt;span style=&quot;color:#950&quot;&gt;$pkcs5_pad&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$bs&lt;/span&gt;);
    mcrypt_generic_init(&lt;span style=&quot;color:#950&quot;&gt;$mc&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$key&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$iv&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$result&lt;/span&gt; = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;array&lt;/span&gt;(
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;encrypted&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;bin2hex&lt;/span&gt;(mcrypt_generic(&lt;span style=&quot;color:#950&quot;&gt;$mc&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;)),
        &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;iv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt; =&amp;gt; &lt;span style=&quot;color:#950&quot;&gt;$iv&lt;/span&gt;
    );
    &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;printf&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;encrypted: %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;iv: %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$result&lt;/span&gt;[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;encrypted&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;], &lt;span style=&quot;color:#950&quot;&gt;$result&lt;/span&gt;[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;iv&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;]);
}

&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;$pkcs5_pad という関数がありますが、これが今回の肝かもしれません。&lt;/p&gt;

&lt;p&gt;かなり簡単に言うと、ブロック暗号では対象を規定のサイズで分割して暗号化するのですが、&lt;/p&gt;

&lt;p&gt;そうすると最後の部分が規定のサイズに満たない場合があります。&lt;/p&gt;

&lt;p&gt;その時に規定のサイズになるように、何らかのデータで埋める必要があり、その方法がいくつか存在します。&lt;/p&gt;

&lt;p&gt;PHPのmcrypt関数は、この作業を自動的に行うようになっていますが、&lt;/p&gt;

&lt;p&gt;いくつかある方法を選択することはできず、ZeroBytePaddingという方式で行ってしまいます。&lt;/p&gt;

&lt;p&gt;この状態では、復号側で問題になることがあるので、予め手動で行うことで、自動的にZeroBytePaddingを行うのを回避できます。&lt;/p&gt;

&lt;p&gt;今回のものはPKCS#5 Paddingというもので、より一般的に用いられているもののようです。&lt;/p&gt;

&lt;p&gt;これについては、暗号側と復号側で方法が一致していないと機能しませんので、
より一般的な方を使用することにしました。&lt;/p&gt;

&lt;p&gt;この仕組み自体はmcrypt関数などには存在しないようで、
関数を定義しました(あるかもしれませんが…コードはPHPドキュメントのコード例を流用しています)。&lt;/p&gt;

&lt;p&gt;また、初期化ベクトルについては、最大長の文字列をuniqid()で適当に作っています。&lt;/p&gt;

&lt;p&gt;PEARのCrypt_Blowfishを使った方法も書いておきます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;encrypt_pear.php&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;#!/usr/bin/env php
&lt;span style=&quot;font-weight:bold;color:#666&quot;&gt;&amp;lt;?php&lt;/span&gt;
&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;require_once&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;vendor/autoload.php&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;;
&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;require_once&lt;/span&gt; &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;Crypt/Blowfish.php&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;;
&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;define&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;PASSPHRASE&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;passphrase-test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;);
{
    &lt;span style=&quot;color:#950&quot;&gt;$opt&lt;/span&gt; = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;getopt&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t:&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;);

    &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; (!&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;isset&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$opt&lt;/span&gt;[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;])) {
        &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;exit&lt;/span&gt;(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;);
    }

    &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt; = &lt;span style=&quot;color:#950&quot;&gt;$opt&lt;/span&gt;[&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;t&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;];
    &lt;span style=&quot;color:#777&quot;&gt;// PKCS#5 Padding&lt;/span&gt;
    &lt;span style=&quot;color:#950&quot;&gt;$pkcs5_pad&lt;/span&gt; = &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;function&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$blocksize&lt;/span&gt;) {
        &lt;span style=&quot;color:#950&quot;&gt;$pad&lt;/span&gt; = &lt;span style=&quot;color:#950&quot;&gt;$blocksize&lt;/span&gt; - (&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;strlen&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;) % &lt;span style=&quot;color:#950&quot;&gt;$blocksize&lt;/span&gt;);
        &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;return&lt;/span&gt; &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt; . &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;str_repeat&lt;/span&gt;(&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;chr&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$pad&lt;/span&gt;), &lt;span style=&quot;color:#950&quot;&gt;$pad&lt;/span&gt;);
    };
    &lt;span style=&quot;color:#950&quot;&gt;$bw&lt;/span&gt;   = &lt;span style=&quot;color:#069&quot;&gt;Crypt_Blowfish&lt;/span&gt;::factory(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;cbc&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;, &lt;span style=&quot;color:#069&quot;&gt;null&lt;/span&gt;, &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;CRYPT_BLOWFISH_PHP&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$is&lt;/span&gt;   = &lt;span style=&quot;color:#950&quot;&gt;$bw&lt;/span&gt;-&amp;gt;getIVSize();
    &lt;span style=&quot;color:#950&quot;&gt;$iv&lt;/span&gt;   = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;substr&lt;/span&gt;(&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;sha1&lt;/span&gt;(&lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;uniqid&lt;/span&gt;()), &lt;span style=&quot;color:#00D&quot;&gt;0&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$is&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$ks&lt;/span&gt;   = &lt;span style=&quot;color:#950&quot;&gt;$bw&lt;/span&gt;-&amp;gt;getMaxKeySize();
    &lt;span style=&quot;color:#950&quot;&gt;$key&lt;/span&gt;  = &lt;span style=&quot;color:#950&quot;&gt;$pkcs5_pad&lt;/span&gt;(&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;PASSPHRASE&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$ks&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$bs&lt;/span&gt;   = &lt;span style=&quot;color:#950&quot;&gt;$bw&lt;/span&gt;-&amp;gt;getBlockSize();
    &lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt; = &lt;span style=&quot;color:#950&quot;&gt;$pkcs5_pad&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$bs&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$bw&lt;/span&gt;-&amp;gt;setKey(&lt;span style=&quot;color:#950&quot;&gt;$key&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$iv&lt;/span&gt;);
    &lt;span style=&quot;color:#950&quot;&gt;$encrypted&lt;/span&gt; = &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;bin2hex&lt;/span&gt;(&lt;span style=&quot;color:#950&quot;&gt;$bw&lt;/span&gt;-&amp;gt;encrypt(&lt;span style=&quot;color:#950&quot;&gt;$text&lt;/span&gt;));
    &lt;span style=&quot;color:#369;font-weight:bold&quot;&gt;printf&lt;/span&gt;(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;encrypt: %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;iv: %s&lt;/span&gt;&lt;span style=&quot;color:#b0b&quot;&gt;\n&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$encrypted&lt;/span&gt;, &lt;span style=&quot;color:#950&quot;&gt;$iv&lt;/span&gt;);
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;PEARはcomposerを使用してインストールしています。&lt;/p&gt;

&lt;p&gt;Crypt_Blowfishは1.1.0RC2です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;composer.json&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;{
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;repositories&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: [
        {
            &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;type&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;pear&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
            &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;url&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;http://pear.php.net&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
        }
    ],
    &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;require&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: {
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;pear-pear.php.net/PEAR&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*@stable&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;pear-pear.php.net/Log&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;*@stable&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;,
        &lt;span style=&quot;color:#606&quot;&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span&gt;pear-pear.php.net/Crypt_Blowfish&lt;/span&gt;&lt;span style=&quot;color:#404&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;1.1.0RC2&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
    }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;rubyblowfish&quot;&gt;rubyでのBlowfish復号&lt;/h2&gt;

&lt;p&gt;rubyの方もlibmcryptを使用できるgemがありますが、
今回はgemをインストールせずにできるかどうかを試してみました。&lt;/p&gt;

&lt;p&gt;rubyは2.2.3です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;decrypt.rb&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#34b&quot;&gt;#!/usr/bin/env ruby&lt;/span&gt;
&lt;span style=&quot;color:#777&quot;&gt;# coding: utf-8&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;openssl&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
require &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;optparse&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;

&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;PASSPHRASE&lt;/span&gt; = &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;passphrase-test&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;
&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;KEY_LENGTH&lt;/span&gt; = &lt;span style=&quot;color:#00D&quot;&gt;56&lt;/span&gt;

encrypted = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;
iv = &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt;

&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;OptionParser&lt;/span&gt;.new &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;do&lt;/span&gt; |opt|
  opt.on(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-e xxx&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {|var| encrypted = var }
  opt.on(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;-i xxx&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&#39;&lt;/span&gt;&lt;/span&gt;) {|var| iv = var }
  opt.parse! &lt;span style=&quot;color:#069&quot;&gt;ARGV&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;

&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt; == encrypted || &lt;span style=&quot;color:#069&quot;&gt;nil&lt;/span&gt; == iv
  puts &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;invalid argument.&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;
  exit(&lt;span style=&quot;color:#00D&quot;&gt;1&lt;/span&gt;)
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;

cipher = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;OpenSSL&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;Cipher&lt;/span&gt;::&lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;BF&lt;/span&gt;.new(&lt;span style=&quot;color:#A60&quot;&gt;:CBC&lt;/span&gt;)
cipher.decrypt
cipher.key_len = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;KEY_LENGTH&lt;/span&gt;

passphrase = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;PASSPHRASE&lt;/span&gt;

&lt;span style=&quot;color:#777&quot;&gt;# PKCS#5 Padding&lt;/span&gt;
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;if&lt;/span&gt; passphrase.length &amp;lt; &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;KEY_LENGTH&lt;/span&gt;
  pad = &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;KEY_LENGTH&lt;/span&gt; - (passphrase.length % &lt;span style=&quot;color:#036;font-weight:bold&quot;&gt;KEY_LENGTH&lt;/span&gt;)
  passphrase += pad.chr * pad
&lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;end&lt;/span&gt;

cipher.key = passphrase
cipher.iv  = iv

result = cipher.update([encrypted].pack(&lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;H*&lt;/span&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;quot;&lt;/span&gt;&lt;/span&gt;)) + cipher.final
puts result
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;まず、KEY_LENGTH = 56 の部分ですが、
opensslを使用した際、デフォルト値が16になっており、
これをPHP側で確認した値と比較した結果、
この設定が必要でした。&lt;/p&gt;

&lt;p&gt;PKCS#5 PaddingについてはPHPと同じです。&lt;/p&gt;

&lt;p&gt;OpenSSL::Cipherについては、公式のマニュアルにあまり記載がないので、
もしかしたらこのあたりをやってくれるメソッドがあるかもしれません。&lt;/p&gt;

&lt;p&gt;暗号化側から受取るデータは、暗号化テキストと初期化ベクトルです。&lt;/p&gt;

&lt;p&gt;また、PHPのところでは特に書いていませんが、
この例では暗号文を16進数に変換して扱っていますので、復号側では元に戻しています。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;以上、利用頻度が結構微妙な暗号化・復号ですが、
見てみると上記言語ではあまりコード量は多くありません。&lt;/p&gt;

&lt;p&gt;その割には仕組みが複雑なせいでハマりやすい分野だと思います。&lt;/p&gt;

&lt;p&gt;気をつけましょう。&lt;/p&gt;
</description>
                <link>/ruby/2015/11/14/blowfish-ruby-php</link>
                <guid>/ruby/2015/11/14/blowfish-ruby-php</guid>
                <pubDate>2015-11-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Scalaのコマンドラインプログラム</title>
                <description>&lt;p&gt;言語に対する理解を深めることを目的として、コマンドラインプログラムを作ってみます。&lt;/p&gt;

&lt;p&gt;Play Frameworkを触っていて、やはりScala言語自体に対する理解が足りなすぎることに直面した、
というのが実際のところです。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;入門書について&lt;/h2&gt;

&lt;p&gt;Scalaの書籍はあまり多くないですが、今だとおそらく以下の本をまず読む人が多いと思います。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://www.amazon.co.jp/Guide-Scala%E3%83%BCScala%E3%83%97%E3%83%AD%E3%82%B0%E3%83%A9%E3%83%9F%E3%83%B3%E3%82%B0%E5%85%A5%E9%96%80-%E4%B8%AD%E6%9D%91%E4%BF%AE%E5%A4%AA-ebook/dp/B00BOBYZTQ/ref=sr_1_1?ie=UTF8&amp;amp;qid=1442990033&amp;amp;sr=8-1&amp;amp;keywords=scala&quot;&gt;Guide to ScalaーScalaプログラミング入門&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;説明にあるとおりWeb版なら無料で、Kindleでも100円という安さです。&lt;/p&gt;

&lt;p&gt;値段を考えればあまり文句も言えないのですが、タイプミスや誤りが結構あります…&lt;/p&gt;

&lt;p&gt;入門書のようなタイプのものは、このあたりは一層気を使って欲しいところですね。&lt;/p&gt;

&lt;p&gt;とにかく、これを一回通読したあとで、プログラムの作成に臨んでいます。&lt;/p&gt;

&lt;h2 id=&quot;section-1&quot;&gt;環境作成&lt;/h2&gt;

&lt;p&gt;activatorでもよかったのですが、構成についても理解が必要だと思いましたので、
sbtenvを使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://github.com/mazgi/sbtenv&quot;&gt;sbtenv&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;インストールは大抵の*envとほとんど同じです。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ git clone git://github.com/mazgi/sbtenv.git ~/.sbtenv
$ echo &#39;export PATH=&amp;quot;${HOME}/.sbtenv/bin:${PATH}&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
$ echo &#39;eval &amp;quot;$(sbtenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;今回作成の最終目標にしているのは、Webページのクローリングを行うものです。&lt;/p&gt;

&lt;p&gt;全体像はある程度考えていますが、やはり一歩ずつですね。&lt;/p&gt;

&lt;p&gt;まずはディレクトリ構成を準備します。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ mkdir crawler-scala ; cd $_
$ mkdir lib
$ mkdir -p src/main/scala
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;web&quot;&gt;Webページの取得&lt;/h3&gt;

&lt;p&gt;Dispatchというライブラリがあるようですが、どうも使用方法が判然としないので、
ひとまずApache HttpClientを使用します。&lt;/p&gt;

&lt;p&gt;各種ライブラリについては、&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;ライブラリ依存性は二つの方法で加えることができる:&lt;/p&gt;

  &lt;p&gt;lib ディレクトリに jar ファイルを入れることでできるアンマネージ依存性（unmanaged dependencies）&lt;/p&gt;

  &lt;p&gt;ビルド定義に設定され、リポジトリから自動でダウンロードされるマネージ依存性（managed dependencies）&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;ということで、libディレクトリにjarを置く方法もあるようですが、
自動でダウンロードする方を使用してみます。&lt;/p&gt;

&lt;p&gt;具体的な依存関係の設定は以下のようになりました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.sbt&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;libraryDependencies ++= Seq(
&amp;quot;com.typesafe.scala-logging&amp;quot; %% &amp;quot;scala-logging&amp;quot; % &amp;quot;3.1.0&amp;quot;,
&amp;quot;org.apache.httpcomponents&amp;quot; % &amp;quot;httpclient&amp;quot; % &amp;quot;4.5.1&amp;quot;
)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;この依存ライブラリの記述は&lt;a href=&quot;http://www.scala-sbt.org/0.13/tutorial/ja/Library-Dependencies.html&quot;&gt;sbtのドキュメント&lt;/a&gt;
に詳しいことが書いてありますが。&lt;/p&gt;

&lt;p&gt;とりあえず今回のものに関しては、’scala-logging’の’%%’は、
パッケージの名称に使用するScalaのバージョン名がつくようになります。
なので、Javaのパッケージであるhttpclientに対しても同じ記述をすると、見つからずエラーとなります。&lt;/p&gt;

&lt;p&gt;そして、コマンドの引数にURLを設定すると、ページの内容を取得して表示するという
簡単なプログラムは以下のようになりました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;main/scala/GetPage.scala&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;import org.apache.http._
import org.apache.http.impl.client.HttpClients
import org.apache.http.client.methods.HttpGet
import org.apache.http.util.EntityUtils

object GetPage {
def main(args: Array[String]): Unit = {
val url = args(0)
try {
println(this.get(url))
} catch {
case e: Exception =&amp;gt;
println(e.getMessage())
sys.exit(1)
}
}

def get(url: String): String = {
val httpclient = HttpClients.createDefault()
val request    = new HttpGet(url)
val response   = httpclient.execute(request)
val result     = EntityUtils.toString(response.getEntity(), &amp;quot;UTF-8&amp;quot;)
httpclient.close
result
}
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;Scalaらしいところはまるで無いような感じになりました。&lt;/p&gt;

&lt;p&gt;sbtプロジェクトを実行する際、通常は’sbt run’で実行できますが、
引数がある場合は、以下のようにクォートしないと正常に認識できません。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sbt &#39;run http://www.yahoo.co.jp/&#39;
...
&amp;lt;/html&amp;gt;

&amp;lt;!-- p10.f8.top.ssk.yahoo.co.jp Wed Sep 23 23:26:10 JST 2015 --&amp;gt;

[success] Total time: 1 s, completed Sep 23, 2015 11:26:11 PM
$
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
</description>
                <link>/scala/2015/09/23/scala-1</link>
                <guid>/scala/2015/09/23/scala-1</guid>
                <pubDate>2015-09-23T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Play Frameworkでscalaをいじってみる2</title>
                <description>&lt;p&gt;前回の続きです。&lt;/p&gt;

&lt;p&gt;前回同様、&lt;a href=&quot;https://www.playframework.com/documentation/ja/2.3.x/Tutorials&quot;&gt;このページ&lt;/a&gt;をそのままなぞっているだけです。&lt;/p&gt;

&lt;p&gt;真面目にやりたい人は上記を見ることをおすすめします。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;単純に、リクエストした内容をDBに登録するフローを試してみます。&lt;/p&gt;

&lt;h2 id=&quot;routing&quot;&gt;routingについて&lt;/h2&gt;

&lt;p&gt;まずはルーティングについて確認しておきましょう。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/ja/2.3.x/ScalaRouting&quot;&gt;Routing&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conf/routes&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;GET     /register/:id/:name              controllers.Application.register(id: Long, name: String)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Actionの方にも定義を追加します。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  def register(id: Long, name: String) = Action {
    Ok(views.html.register(id, name))
  }
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;テンプレートは省略しますが、これで渡した内容を表示することができます。&lt;/p&gt;

&lt;p&gt;Stringになっている部分はマルチバイト文字でも自動的にデコードして表示することができます。&lt;/p&gt;

&lt;p&gt;型に合わないリクエスト(/register/abc/1 など)では、Bad Requestになります。&lt;/p&gt;

&lt;h2 id=&quot;db&quot;&gt;DB接続&lt;/h2&gt;

&lt;h3 id=&quot;mysql-connector-java-&quot;&gt;mysql-connector-java の追加&lt;/h3&gt;

&lt;p&gt;build.sbtに設定を追加します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.sbt&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;mysql&quot; % &quot;mysql-connector-java&quot; % &quot;5.1.27&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで一応activatorを再起動しました。&lt;/p&gt;

&lt;h3 id=&quot;insert&quot;&gt;INSERT文実行&lt;/h3&gt;

&lt;p&gt;簡単なINSERT文を実行してみます。&lt;/p&gt;

&lt;p&gt;テーブルは以下のように用意しています。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#B06;font-weight:bold&quot;&gt;CREATE&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;TABLE&lt;/span&gt; registers (
id &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;bigint&lt;/span&gt; &lt;span style=&quot;color:#088;font-weight:bold&quot;&gt;PRIMARY&lt;/span&gt; &lt;span style=&quot;color:#339;font-weight:bold&quot;&gt;KEY&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;NOT&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt;,
name &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;varchar&lt;/span&gt;(&lt;span style=&quot;color:#00D&quot;&gt;512&lt;/span&gt;) &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;NOT&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt;,
created_at &lt;span style=&quot;color:#0a8;font-weight:bold&quot;&gt;datetime&lt;/span&gt; &lt;span style=&quot;color:#080;font-weight:bold&quot;&gt;NOT&lt;/span&gt; &lt;span style=&quot;color:#069&quot;&gt;NULL&lt;/span&gt;
);
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以下、差分のみです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/controllers/Application.scala&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;import play.api.Play.current
import play.api.db._

  def register(id: Long, name: String) = Action {
    val con = DB.getConnection()

    var result = &amp;quot;&amp;quot;

    try {
      val q_str = &amp;quot;INSERT INTO registers (id, name, created_at) VALUES (?, ?, CURRENT_TIMESTAMP) ; &amp;quot;
      val stmt  = con.prepareStatement(q_str)

      stmt.setLong(1, id)
      stmt.setString(2, name)
      stmt.executeUpdate()
      result = &amp;quot;Success.&amp;quot;
    } catch {
      case e:Exception =&amp;gt;
        result = e.toString
    } finally {
      con.close()
    }
    Ok(views.html.register(id, name, result))
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;play.api.db._ はよいとして、play.api.Play.current をimportしないと、追加することを促すエラーを表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;You do not have an implicit Application in scope. If you want to bring the current running Application into context, just add import play.api.Play.current
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;「context中に暗黙のApplicationがない」ということですが、これはScalaの implicit という機能が肝のようです。&lt;/p&gt;

&lt;p&gt;そしてこの play.api.Play.current が現在のアプリケーションの状態を保持しているもの、と理解して良さそうです(あまり正確ではなさそうですが)。&lt;/p&gt;

&lt;p&gt;DBコネクションの設定情報などもこれを通して取得している、ということなのでしょうかね。&lt;/p&gt;

&lt;p&gt;上記の import を追加して動かしてみます。&lt;/p&gt;

&lt;p&gt;http://localhost:9000/register/1/東京都&lt;/p&gt;

&lt;p&gt;にアクセスしてみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Success.
ID: 1
name: 東京都
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;idはPRIMARY KEYですので、リロードすると当然ですがDB側でエラーとなります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;com.mysql.jdbc.exceptions.jdbc4.MySQLIntegrityConstraintViolationException: Duplicate entry &#39;1&#39; for key &#39;PRIMARY&#39;
ID: 1
name: 東京都
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;migrationorm&quot;&gt;Migration/ORMについて&lt;/h3&gt;

&lt;p&gt;migrationについては、evolutionsというものがあるようですが、
日本語のドキュメントは前のバージョンなので、少し内容が違っているようです。&lt;/p&gt;

&lt;p&gt;ORMについては、javaのebeanというのもあるようですが、
シンプルなSQLアクセスということで、Anormというものもあるようです。&lt;/p&gt;

&lt;p&gt;最初にこうあります。&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Anorm は ORM (Object Relational Mapper) ではない&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;随分と潔いですね。&lt;/p&gt;

&lt;p&gt;ORMは確かに便利ですが、個人的には利用価値があまりないケースも多いと思っているので、
SQL直書きに近いこちらでやってみようと思います。&lt;/p&gt;

&lt;p&gt;あらかじめ先ほどのテーブルは削除しています。&lt;/p&gt;

&lt;p&gt;evolutions用のディレクトリを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ mkdir -p conf/evolutions/default
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依存関係を解決します。&lt;/p&gt;

&lt;p&gt;このあたりは2.3系とはやり方が違っているようです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;build.sbt&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;libraryDependencies += &quot;com.typesafe.play&quot; %% &quot;anorm&quot; % &quot;2.4.0&quot;
libraryDependencies += evolutions
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;migrationのファイルはファイル名の番号で順番に実行していく形式のようです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conf/evolutions/default/1.sql&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;### registers

# --- !Ups
CREATE TABLE registers (
id bigint PRIMARY KEY NOT NULL,
name varchar(512) NOT NULL,
created_at datetime NOT NULL
) ENGINE=innoDB ;

# --- !Downs
DROP TABLE registers ;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定が済んだらactivatorを再起動してアクセスすると、以下のような画面になりました。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/evo.png&quot; alt=&quot;evolutions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;[Apply this script now!] ボタンを押せば、このCREATE文を実行するようになっています。&lt;/p&gt;

&lt;p&gt;今度はレコードを登録する部分を変更してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;package controllers

import play.api.Play.current
import play.api._
import play.api.mvc._
import play.api.db.DB
import play.Logger
import anorm._

class Application extends Controller {

  def register(id: Long, name: String) = Action {
    var result_str = &amp;quot;&amp;quot;
    try {
      DB.withConnection { implicit c =&amp;gt;
        val result = SQL(
          &amp;quot;INSERT INTO registers (id, name, created_at) VALUES({id}, {name}, CURRENT_TIMESTAMP) ; &amp;quot;
        ).on(&#39;id -&amp;gt; id, &#39;name -&amp;gt; name).executeInsert()
        result_str = &amp;quot;Success.&amp;quot;
      }
    } catch {
      case e:Exception =&amp;gt;
        result_str = e.toString()
    }
    Ok(views.html.register(id, name, result_str))
  }

}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;importが増えたので、その部分も記述しています。&lt;/p&gt;

&lt;p&gt;プレースホルダが比較的簡単に使えるのはよいですね。&lt;/p&gt;

&lt;p&gt;…しかし、絶対的にScala言語に関する知識が不足しているので、エレガントとは程遠いコードになってしまいました。&lt;/p&gt;

&lt;p&gt;次回はModelを作成してコントローラをすっきりさせたいと思います。&lt;/p&gt;
</description>
                <link>/scala/2015/09/14/play-fw2</link>
                <guid>/scala/2015/09/14/play-fw2</guid>
                <pubDate>2015-09-14T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>Play Frameworkでscalaをいじってみる</title>
                <description>&lt;p&gt;java界隈の話題にはあまり目を向けていないのですが、
少しはscalaを触っておいてもいいかと思い、
比較的盛り上がってそうなPlay Frameworkを動かしてみようと思います。&lt;/p&gt;

&lt;p&gt;以下、作成物は&lt;a href=&quot;https://www.playframework.com/documentation/ja/2.3.x/Tutorials&quot;&gt;このページ&lt;/a&gt;をそのままなぞっているだけです。&lt;/p&gt;

&lt;p&gt;チュートリアルはとても充実していて、少しバージョンが古いですが日本語訳もありますので、
真面目にやりたい人は上記を見ることをおすすめします。&lt;/p&gt;

&lt;h2 id=&quot;play-framework&quot;&gt;Play Frameworkについて&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;scala / java 製&lt;/li&gt;
  &lt;li&gt;テンプレートエンジンはscala主体のものらしい&lt;/li&gt;
  &lt;li&gt;scalaという言語の特性から、scalaでもjavaでも開発可能&lt;/li&gt;
  &lt;li&gt;今時のrailsやdjangoのような構成&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今のところはこれくらいの理解しかありません。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;インストール&lt;/h2&gt;

&lt;p&gt;色々方法があるようですが、以下に書いているTypesafe Activatorというものを使用する方法を試します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.playframework.com/documentation/ja/2.3.x/Installing&quot;&gt;Installing&lt;/a&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sudo aptitude -y install openjdk-8-jdk
...
$ wget https://downloads.typesafe.com/typesafe-activator/1.3.6/typesafe-activator-1.3.6.zip
$ unzip typesafe-activator-1.3.6.zip
$ mv activator-dist-1.3.6 ~/
$ echo &#39;PATH=$HOME/activator-dist-1.3.6:$PATH&#39; &amp;gt;&amp;gt; ~/.bashrc
$ $SHELL -l
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h2 id=&quot;project&quot;&gt;project作成&lt;/h2&gt;

&lt;p&gt;このあたりはrailsなどと同じような雰囲気です。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ activator new test-app play-scala
...
$ cd test-app
$ ./activator run
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;この状態で http://localhost:9000 へアクセスすると、ページを表示できます。&lt;/p&gt;

&lt;p&gt;Play Frameworkのバージョンは2.4.3になっています。&lt;/p&gt;

&lt;h2 id=&quot;controller--template--route&quot;&gt;controller / template / route&lt;/h2&gt;

&lt;p&gt;自前のページを作成してみます。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/controllers/Application.scala&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;package controllers

import play.api._
import play.api.mvc._

class Application extends Controller {

  def index = Action {
    Ok(views.html.index(&amp;quot;Your new application is ready.&amp;quot;))
  }

  def first = Action {
    val message = &amp;quot;First Message&amp;quot;
    Ok(views.html.first(message))
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;テンプレートでは、変数を型指定で受け取る必要があるようです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/views/first.scala.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;@(message: String)

&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;@message&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;この際のルーティング設定は単純ですね。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;conf/routes&lt;/strong&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# Home page
GET     /                           controllers.Application.index
GET     /first                      controllers.Application.first
# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(path=&quot;/public&quot;, file: Asset)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;section-1&quot;&gt;テンプレート変数&lt;/h2&gt;

&lt;p&gt;こういうのは通常、Modelや自前のオブジェクトなどを渡すのがよくあるパターンなのでしょうか。&lt;/p&gt;

&lt;p&gt;Play Frameworkのテンプレートはどうやらテンプレート側で受け取る定義が必要になるので、
このあたりは簡潔に済ませたほうが良さそうに感じます。&lt;/p&gt;

&lt;p&gt;そういうわけで、複数の値を渡す場合はどうするのか、実践してみました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/controllers/Application.scala&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;package controllers

import play.api._
import play.api.mvc._

class Application extends Controller {

  def index = Action {
    Ok(views.html.index(&amp;quot;Your new application is ready.&amp;quot;))
  }

  def first = Action {
    val message = &amp;quot;First Message&amp;quot;
    val messages = Map(&amp;quot;h2&amp;quot; -&amp;gt; &amp;quot;Second Message&amp;quot;, &amp;quot;h3&amp;quot; -&amp;gt; &amp;quot;Third Message&amp;quot;)
    val num_list = Seq(1, 3, 5, 7, 9)
    Ok(views.html.first(message, messages, num_list))
  }
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;単純にカンマ区切りで引数を設定すれば、複数の値を渡せるようです。&lt;/p&gt;

&lt;p&gt;受け取る側は、やはり型指定が必要です。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;app/views/first.scala.html&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;(
message: String,
messages: Map[String, String],
num_list: Seq[Int]
)

&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;h1&amp;gt;&lt;/span&gt;@message&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/h1&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;h2&amp;gt;&lt;/span&gt;@messages(&amp;quot;h2&amp;quot;)&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/h2&amp;gt;&lt;/span&gt;
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;h3&amp;gt;&lt;/span&gt;@messages(&amp;quot;h3&amp;quot;)&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/h3&amp;gt;&lt;/span&gt;

&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;ul&amp;gt;&lt;/span&gt;
@for(num &lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;-&lt;/span&gt; &lt;span style=&quot;color:#b48&quot;&gt;num_list&lt;/span&gt;&lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;)&lt;/span&gt; &lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;{&lt;/span&gt;
  &lt;span style=&quot;color:#F00;background-color:#FAA&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span style=&quot;color:#b48&quot;&gt;li&lt;/span&gt;&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;gt;&lt;/span&gt;Number @num&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
}
&lt;span style=&quot;color:#070;font-weight:bold&quot;&gt;&amp;lt;/ul&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;以上、Hello Worldに毛が生えた程度の内容ですが、今回はここまでにしておきます。&lt;/p&gt;

&lt;p&gt;次はDB接続やデプロイ方法などについて確認できればいいな…&lt;/p&gt;
</description>
                <link>/scala/2015/09/10/play-fw</link>
                <guid>/scala/2015/09/10/play-fw</guid>
                <pubDate>2015-09-10T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>ansibleによるコンテナ設定</title>
                <description>&lt;p&gt;前回に引き続き、dockerコンテナの設定を行います。&lt;/p&gt;

&lt;p&gt;今回は各種設定をansibleで行ってみます。&lt;/p&gt;

&lt;p&gt;コンテナの設定ということであればDockerfileで行うべきところですが、
物理サーバや各種Virtual Machineにも流用することを考えると、
ansibleやchefなどの利用は有効だと思います。&lt;/p&gt;

&lt;h2 id=&quot;section&quot;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;最初に前回作成したコンテナを起動して、IPアドレスを控えておきます。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ docker start srv1
srv1
$ docker ps -a
CONTAINER ID        IMAGE                          COMMAND               CREATED             STATUS              PORTS               NAMES
0211f0f72f4b        croissant/ubuntu-base:latest   &amp;quot;/usr/sbin/sshd -D&amp;quot;   5 days ago          Up 4 seconds        22/tcp              srv1
$ docker inspect srv1 | grep IPAddress
&amp;quot;IPAddress&amp;quot;: &amp;quot;172.17.0.1&amp;quot;,
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ansibleはpython製ツールですが、実際にはYAMLを編集するだけなので、chefと比べてかなりシンプルに設定できるようです。&lt;/p&gt;

&lt;p&gt;今回は開発用環境の構築が主眼になっていますので、
必要なものをまとめてインストールすることにします。&lt;/p&gt;

&lt;p&gt;具体的には以下のことを自動化します。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;mysqlのインストール (aptitude)&lt;/li&gt;
  &lt;li&gt;rbenv (事前に必要なパッケージをインストールして、git clone等)&lt;/li&gt;
  &lt;li&gt;emacs (事前に必要なパッケージをインストールして、ソースをビルド)&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;ansible&quot;&gt;ansibleのインストール&lt;/h3&gt;

&lt;p&gt;ansibleのインストールはaptitudeで行います。&lt;/p&gt;

&lt;p&gt;インストールの確認も兼ねて、疎通確認のコマンドを実行してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sudo aptitude install ansible
...
$ echo 172.17.0.1 &amp;gt; host             
$ ansible -i host -u docker 172.17.0.1 -m ping
172.17.0.1 | success &amp;gt;&amp;gt; {
  &amp;quot;changed&amp;quot;: false,
  &amp;quot;ping&amp;quot;: &amp;quot;pong&amp;quot;
}
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;mysql&quot;&gt;実例 - mysqlのインストール&lt;/h2&gt;

&lt;p&gt;mysqlはaptitudeでインストールします。&lt;/p&gt;

&lt;p&gt;通常ではコマンドライン一行でインストールできます。&lt;/p&gt;

&lt;p&gt;パッケージ情報のアップデートを行ってからインストールするため、通常では実行するコマンドは以下のようになります。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sudo aptitude update
$ sudo aptitude install mysql-server mysql-client libmysqlclient-dev
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;これを実行する設定をYAMLに記述します。&lt;/p&gt;

&lt;p&gt;ansibleでは、このYAMLファイルのことを’playbook’と呼んでいるようで、実行の際のコマンドは’ansible-playbook’になります。&lt;/p&gt;

&lt;h3 id=&quot;playbook&quot;&gt;playbookの記述&lt;/h3&gt;

&lt;p&gt;最低限必要な設定は概ね以下のとおりです。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;hosts: – 対象のホスト hostファイルの記述方法によって、グルーピング可能&lt;/li&gt;
  &lt;li&gt;sudo: コマンドをsudoで実行するフラグ&lt;/li&gt;
  &lt;li&gt;user: 実行ユーザ&lt;/li&gt;
  &lt;li&gt;tasks: 実行内容のリスト&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;’- name: ‘ でタスクに名前を設定します。&lt;/p&gt;

&lt;p&gt;‘command: ‘ で実行するコマンドを設定します。&lt;/p&gt;

&lt;h3 id=&quot;section-1&quot;&gt;パスワードの自動設定&lt;/h3&gt;

&lt;p&gt;mysql-serverをインストールする際、rootユーザのパスワード入力を要求されますが、
そのままではそこでインストール処理がストップします。&lt;/p&gt;

&lt;p&gt;~~この問題に対しては、かなり強引ですが、ひとまず仮パスワードを予め設定しておき、
入力しなくて済むようにすることで回避します。~~&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &#39;mysql-server-5.6 mysql-server/root_password password root&#39;
$ sudo debconf-set-selections &amp;lt;&amp;lt;&amp;lt; &#39;mysql-server-5.6 mysql-server/root_password_again password root&#39;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;上記のやりかたでも通らないようです。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;ansibleでは’shell:’の場合、コマンドが/bin/sh起動になるので、
chefでのインストール例で使用しているものはそのままではエラーになります。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;また、’command:’ではリダイレクト等の記号を使用できないため、動作しません。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;結局、環境変数(or シェル変数?)’DEBIAN_FRONTEND’を設定する方法で回避することにしました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;具体的な設定例は以下のようになりました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;mysql.yml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#f8f;background:#505&quot;&gt;&lt;span style=&quot;color:#f4f&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;hosts: 172.17.0.1&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;sudo&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;user&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: install aptitude&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;apt-get -y install aptitude&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: update packages&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;aptitude -y update&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: install mysql&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;aptitude -y install mysql-server-5.6 mysql-client-5.6&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;environment&lt;/span&gt;:
        &lt;span style=&quot;color:#606&quot;&gt;DEBIAN_FRONTEND&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;&#39;noninteractive&#39;&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;インストールを実行します。&lt;/p&gt;

&lt;p&gt;-i オプションで指定するhostファイルは疎通確認の際に使用したものです。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ ansible-playbook -i host mysql.yml
PLAY [172.17.0.1] *************************************************************
...
PLAY RECAP ********************************************************************
172.17.0.1                 : ok=4    changed=3    unreachable=0    failed=0
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;rbenv&quot;&gt;実例 - rbenvのインストールと設定&lt;/h2&gt;

&lt;p&gt;mysqlはaptitudeでインストールしましたが、rbenvについてはgit cloneでインストールしたあと、
任意のバージョンのrubyをインストールします。&lt;/p&gt;

&lt;h3 id=&quot;section-2&quot;&gt;変数の定義&lt;/h3&gt;

&lt;p&gt;playbook内で使用できる変数を定義できます。&lt;/p&gt;

&lt;p&gt;以下のような記述です。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;  &lt;span style=&quot;color:#606&quot;&gt;vars&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;ruby_ver&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;2.2.3&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;/home/docker/.rbenv&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;先ほどのmysqlの場合と同じ要領で設定を行います。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#f8f;background:#505&quot;&gt;&lt;span style=&quot;color:#f4f&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;hosts: 172.17.0.1&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;user&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;vars&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;ruby_ver&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;2.2.3&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;/home/docker/.rbenv&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: install dependencies&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        sudo aptitude -y install
        build-essential
        bison
        libreadline6-dev
        curl
        zlib1g-dev
        libssl-dev
        libyaml-dev
        libsqlite3-dev
        sqlite3
        libxml2-dev
        libxslt1-dev
        autoconf
        libncurses5-dev&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: clone rbenv&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;test -e  || git clone https://github.com/sstephenson/rbenv.git &lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: clone ruby-build&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;test -e /plugins/ruby-build || git clone https://github.com/sstephenson/ruby-build.git /plugins/ruby-build&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: add PATH&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;touch ~/.bashrc ; echo &#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: add eval&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &#39;eval &amp;quot;$(rbenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: reload bashrc&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;source /home/docker/.bashrc&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: install ruby&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;rbenv install &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;とりあえずこのような感じで実行しましたが、エラーが発生しました。&lt;/p&gt;

&lt;h3 id=&quot;dns&quot;&gt;DNS設定&lt;/h3&gt;

&lt;p&gt;rbenvはdockerユーザのホームディレクトリにインストールするため、sudo設定を行っていません。&lt;/p&gt;

&lt;p&gt;dockerユーザでのコマンドでは、どうやら名前解決に失敗しているようで、cloneができません。&lt;/p&gt;

&lt;p&gt;これはdocker自体の設定によるものなので、設定を修正しました。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;/etc/default/docker&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;DOCKER_OPTS=&amp;quot;--dns 8.8.8.8 -g /path/to/docker&amp;quot;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;-g /path/to/dockerはディレクトリを変更したためで、通常は不要です。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;section-3&quot;&gt;ディレクトリが存在する場合は実行しない&lt;/h3&gt;

&lt;p&gt;git cloneはclone対象ディレクトリがある場合はエラーになります。&lt;/p&gt;

&lt;p&gt;存在確認を行って、存在する場合は実行しないコマンドにしたつもりですが、
commandの場合はこの記述ではダメで、ansibleの機能で制御する必要があるようです。&lt;/p&gt;

&lt;p&gt;~~when: 1 == result というような記述で、
あらかじめ存在確認のコマンド(test -e など)で結果を保存しておき、
存在確認の結果で実行制御できるようです。~~&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;後で動かしてみると、これもダメみたいでした。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;他の方法を調べたところ、stat: というモジュールがありましたので、そちらの記述に変更しました。&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;stat: は指定したpathの状態を取得できるもので、今回は存在確認ができれば良いので、以下のようにしています。&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;stat: path=&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;register&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;rbenv&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: clone rbenv&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;git clone https://github.com/sstephenson/rbenv.git &lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;when&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;not rbenv.stat.exists&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-4&quot;&gt;ファイルをコピーする&lt;/h3&gt;

&lt;p&gt;copy: src=xxx dest=xxx というフォーマットで実現できます&lt;/p&gt;

&lt;h3 id=&quot;section-5&quot;&gt;環境変数の追加と反映について&lt;/h3&gt;

&lt;p&gt;.bashrcに追加した環境変数の反映は、通常ではsource等で行いますが、
ansibleで追加したあとはそのままでは反映できないようです。&lt;/p&gt;

&lt;p&gt;また、コマンドを実行する記述については、command: の他に shell: もあるようで、
shell: の場合は/bin/sh による実行で、&amp;amp;&amp;amp;や||が使用できます。&lt;/p&gt;

&lt;p&gt;playbook内に環境変数を別途定義するか、bash -lc でコマンド実行する方法が紹介されていましたが、
これらも動作しませんでした。&lt;/p&gt;

&lt;p&gt;これらはcommandとshellの違いか、環境の違いによるものと思われますが、
PATHの場合は、絶対パス指定という確実な方法があるため、そちらを使用することにしました。&lt;/p&gt;

&lt;p&gt;以下の内容がインストールに成功したものです。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;rbenv.yml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#f8f;background:#505&quot;&gt;&lt;span style=&quot;color:#f4f&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;hosts: 172.17.0.1&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;user&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;sudo&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;false&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;vars&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;ruby_ver&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;2.2.3&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;target&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;/home/docker/.rbenv&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;rbenv_path&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;/home/docker/.rbenv/bin/rbenv&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: send bashrc&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;copy&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;src=files/.bashrc dest=~/.bashrc&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;stat: path=&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;register&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;rbenv&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: clone rbenv&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;git clone https://github.com/sstephenson/rbenv.git &lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;when&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;not rbenv.stat.exists&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;stat: path=/plugins/ruby-build&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;register&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;ruby_build&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: clone ruby-build&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;git clone https://github.com/sstephenson/ruby-build.git /plugins/ruby-build&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;when&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;not ruby_build.stat.exists&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;command: touch ~/.bashrc&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: add PATH&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;shell&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;echo &#39;export PATH=&amp;quot;$HOME/.rbenv/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc &amp;amp;&amp;amp; echo &#39;eval &amp;quot;$(rbenv init -)&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bashrc&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: install ruby&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;shell&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;( init -);  install -s  ;  rehash ;   global &lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;emacs&quot;&gt;実例 - emacsのインストール&lt;/h2&gt;

&lt;p&gt;今度は、emacsをソースコードからビルド＆インストールします。&lt;/p&gt;

&lt;h3 id=&quot;section-6&quot;&gt;ファイルのダウンロード&lt;/h3&gt;

&lt;p&gt;ansibleにはファイルをダウンロードする機能があります。&lt;/p&gt;

&lt;p&gt;以下のように記述することで、ネット上からファイルをダウンロードできます。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: get emacs src&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;get_url&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;url=http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-.tar.xz dest=&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;h3 id=&quot;section-7&quot;&gt;ディレクトリの変更&lt;/h3&gt;

&lt;p&gt;tar.gzなどをダウンロードしてビルドする際、展開したディレクトリに移動する必要があります。&lt;/p&gt;

&lt;p&gt;ansibleのタスクは、前のタスクの状態を引き継がないようになっているようなので、
カレントディレクトリの変更を明示する必要があります。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: make emacs&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;make chdir=/emacs-&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ビルド自体はrbenvでも行っていますので、ここでは大きな問題は発生しないと思いつつ、
前回のポイントも踏まえてplaybookを記述します。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;emacs.yml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#f8f;background:#505&quot;&gt;&lt;span style=&quot;color:#f4f&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;hosts: 172.17.0.1&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;sudo&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;user&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;vars&lt;/span&gt;:
    &lt;span style=&quot;color:#606&quot;&gt;emacs_ver&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;24.5&lt;/span&gt;&lt;/span&gt;
    &lt;span style=&quot;color:#606&quot;&gt;src&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;/usr/src&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;tasks&lt;/span&gt;:
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: get emacs src&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;get_url&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;url=http://ftp.jaist.ac.jp/pub/GNU/emacs/emacs-.tar.xz dest=&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: extract emacs src&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;tar xJf emacs-.tar.xz chdir= creates=/&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: configure emacs&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#710&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span style=&quot;color:#D20&quot;&gt;
        ./configure
        --without-toolkit-scroll-bars
        --without-xaw3d
        --without-compress-info
        --without-sound
        --without-pop
        --without-xpm
        --without-tiff
        --without-rsvg
        --without-gconf
        --without-gsettings
        --without-selinux
        --without-gpm
        --without-makeinfo
        --without-x
        chdir=/emacs-&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: make emacs&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;make chdir=/emacs-&lt;/span&gt;&lt;/span&gt;
    - &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;name: install emacs&lt;/span&gt;&lt;/span&gt;
      &lt;span style=&quot;color:#606&quot;&gt;command&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;make install chdir=/emacs-&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;include&quot;&gt;includeについて&lt;/h2&gt;

&lt;p&gt;include: を使用することで、playbook内から他のplaybookを呼び出すことができます。&lt;/p&gt;

&lt;p&gt;再利用という観点は今回のケースではそれほど重要ではありませんが、
種別ごとにタスクをまとめておくことで利用しやすくなるでしょう。&lt;/p&gt;

&lt;p&gt;再利用については、すでに作成済みのplaybookを呼び出すだけになるので、
とても簡潔に記述できます。&lt;/p&gt;

&lt;p&gt;今回作成したものをすべてインストールする場合は、例えば以下のようになります。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;srv1.yml&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span style=&quot;color:#f8f;background:#505&quot;&gt;&lt;span style=&quot;color:#f4f&quot;&gt;---&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;hosts: 172.17.0.1&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;sudo&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;true&lt;/span&gt;&lt;/span&gt;
  &lt;span style=&quot;color:#606&quot;&gt;user&lt;/span&gt;: &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;docker&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;include: common.yml&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;include: mysql.yml&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;include: rbenv.yml&lt;/span&gt;&lt;/span&gt;
- &lt;span style=&quot;background-color:hsla(0,100%,50%,0.05)&quot;&gt;&lt;span style=&quot;color:#D20&quot;&gt;include: emacs.yml&lt;/span&gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;ul&gt;
  &lt;li&gt;mysql以外のインストールパッケージはcommon.ymlにまとめています。&lt;/li&gt;
  &lt;li&gt;includeしているファイルのhosts設定はすべてallに変更しました。&lt;/li&gt;
&lt;/ul&gt;

</description>
                <link>/docker/2015/09/05/docker-ansible</link>
                <guid>/docker/2015/09/05/docker-ansible</guid>
                <pubDate>2015-09-05T23:50:00+09:00</pubDate>
        </item>

        <item>
                <title>Dockerfileによるdockerイメージ作成</title>
                <description>&lt;p&gt;手頃なdockerのcheat sheetがあったので、そちらを参考にシンプルなものを作成します。 &lt;sup id=&quot;fnref:1&quot;&gt;&lt;a href=&quot;#fn:1&quot; class=&quot;footnote&quot;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&amp;lt;&amp;lt;http://lzone.de/cheat-sheet/Docker&amp;gt;&amp;gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;FROM ubuntu:vivid
RUN apt-get update
RUN apt-get -y install git python openssh-server
EXPOSE 22
RUN useradd -m -d /home/docker -u 1000 -s /bin/bash docker
RUN mkdir /home/docker/.ssh
RUN chmod 700 /home/docker/.ssh
ADD authorized_keys /home/docker/.ssh/
RUN chmod 600 /home/docker/.ssh/authorized_keys
RUN chown -R docker:docker /home/docker/.ssh
RUN mkdir /var/run/sshd
RUN echo &#39;docker ALL=(ALL:ALL) NOPASSWD:ALL&#39; &amp;gt;&amp;gt; /etc/sudoers
CMD [&amp;quot;/usr/sbin/sshd&amp;quot;, &amp;quot;-D&amp;quot;]
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;ミドルウェアのインストールについてはansibleを使用して行う予定なので、ここでは必要最低限のものだけをインストールするようにしました。&lt;/p&gt;

&lt;p&gt;ここで使用しているパターンは以下の通り。&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;FROM イメージ名&lt;/li&gt;
  &lt;li&gt;RUN コマンドライン&lt;/li&gt;
  &lt;li&gt;EXPOSE ポート&lt;/li&gt;
  &lt;li&gt;CMD コンテナ起動時に実行するコマンド&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;上に上げたDockerfileで行っていることは、以下のようになります。 &lt;sup id=&quot;fnref:2&quot;&gt;&lt;a href=&quot;#fn:2&quot; class=&quot;footnote&quot;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;イメージを指定、ここではubuntu:vivid(15.04)&lt;/li&gt;
  &lt;li&gt;apt-getでパッケージをインストール(git/python/openssh-server/sudo)&lt;/li&gt;
  &lt;li&gt;port:22 を開放&lt;/li&gt;
  &lt;li&gt;dockerユーザを作成&lt;/li&gt;
  &lt;li&gt;dockerユーザでssh公開鍵認証できるようauthorized_keysファイルを設置&lt;/li&gt;
  &lt;li&gt;sshdのpidファイル用ディレクトリを作成&lt;/li&gt;
  &lt;li&gt;dockerユーザのsudo設定&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;この状態でまずは実行してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ docker build -t ubuntu-base .
...
$ docker images
REPOSITORY              TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
croissant/ubuntu-base   latest              b92c8ea9b42e        25 seconds ago      321.6 MB
ubuntu                  vivid               013f3d01d247        6 days ago          131.4 MB
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;イメージはできているようです。&lt;/p&gt;

&lt;p&gt;それでは、作成したイメージを使用してコンテナを起動してみます。&lt;/p&gt;

&lt;div class=&quot;highlighter-coderay&quot;&gt;&lt;div class=&quot;CodeRay&quot;&gt;
  &lt;div class=&quot;code&quot;&gt;&lt;pre&gt;$ docker run -t -i --name srv1 -d croissant/ubuntu-base
0211f0f72f4b2451ec07892c44d8c9c38c93f1496b3e11fda9cddaa8d553c45c
$ docker inspect srv1 | grep IPAddress
&amp;quot;IPAddress&amp;quot;: &amp;quot;172.17.0.65&amp;quot;,
$ ssh docker@172.17.0.65
$ docker run -t -i --name srv1 -d croissant/ubuntu-base
0211f0f72f4b2451ec07892c44d8c9c38c93f1496b3e11fda9cddaa8d553c45c
The authenticity of host &#39;172.17.0.65 (172.17.0.65)&#39; can&#39;t be established.
ECDSA key fingerprint is 53:53:1b:28:cc:6b:7f:76:3a:d9:10:74:0b:c1:0d:23.
Are you sure you want to continue connecting (yes/no)? yes
Warning: Permanently added &#39;172.17.0.65&#39; (ECDSA) to the list of known hosts.
Welcome to Ubuntu 15.04 (GNU/Linux 3.16.0-4-amd64 x86_64)
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;p&gt;docker inspect で起動中のコンテナに関する情報をjson形式で取得できます。
ここではIPアドレスを取得するのに使用しています。&lt;/p&gt;

&lt;p&gt;次回は、ansibleによる環境構築自動化について…あるいは、コンテナに対しての固定IPアドレス設定を行いたいと思います。&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&lt;strong&gt;脚注&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;footnotes&quot;&gt;
  &lt;ol&gt;
    &lt;li id=&quot;fn:1&quot;&gt;
      &lt;p&gt;dockerにsshサーバをインストールするのはよろしくないという話をちらほら見かけますが、今回の試みでは開発環境としての利用のみ想定しており、環境構築の手段を流用することも考えているので、あえてインストールしています。 &lt;a href=&quot;#fnref:1&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
    &lt;li id=&quot;fn:2&quot;&gt;
      &lt;p&gt;RUNで指定するコマンドは、先にとりあえず作成できるイメージを用意して、ひとつずつ確認しながら記述したほうが良いです。間違いがあると、イメージを削除して作りなおす作業で結構な時間がかかりますので… &lt;a href=&quot;#fnref:2&quot; class=&quot;reversefootnote&quot;&gt;&amp;#8617;&lt;/a&gt;&lt;/p&gt;
    &lt;/li&gt;
  &lt;/ol&gt;
&lt;/div&gt;
</description>
                <link>/docker/2015/08/26/docker-file</link>
                <guid>/docker/2015/08/26/docker-file</guid>
                <pubDate>2015-08-26T00:00:00+09:00</pubDate>
        </item>

        <item>
                <title>docker環境構築</title>
                <description>&lt;p&gt;環境はdebian8(jessie)です。&lt;/p&gt;

&lt;p&gt;用途は完全に開発環境としての利用を想定しています。&lt;/p&gt;

&lt;p&gt;dockerをインストールする際、sources.listにbackportsを追加する必要があります。&lt;/p&gt;

&lt;p&gt;また、パッケージ名は’docker.io’になっており、’docker’は全く別のものです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo echo &#39;deb http://http.debian.net/debian jessie-backports main&#39; &amp;gt;&amp;gt; /etc/apt/sources.list
$ sudo aptitude update ; sudo aptitude install docker.io
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一般ユーザーでもコマンドを実行できるように設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ gpasswd -a [user] docker
$ sudo vi /etc/default/docker
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
  &lt;li&gt;ログアウトしないとグループに追加されない模様。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ディスク構成の関係で、コンテナの場所を　/var/lib/docker から変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/default/docker
OPTIONS=&quot;-g /path/to/docker&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一度ログアウトしてグループ加入を反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker info
Containers: 0
Images: 4
Storage Driver: aufs
Root Dir: /path/to/docker/aufs
Backing Filesystem: xfs
Dirs: 4
Dirperm1 Supported: true
Execution Driver: native-0.2
Kernel Version: 3.16.0-4-amd64
Operating System: Debian GNU/Linux 8 (jessie)
CPUs: 4
Total Memory: 14.58 GiB
Name: servername
ID: TPUW:FRSB:PK3E:QUIB:DSVM:AX3I:7CMU:QCZF:LQJV:AEBT:6JUQ:YJIB
WARNING: No memory limit support
WARNING: No swap limit support
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;とりあえず、ubuntuのイメージを取得してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull ubuntu
latest: Pulling from ubuntu
d3a1f33e8a5a: Pull complete
c22013c84729: Pull complete
d74508fb6632: Pull complete
91e54dfb1179: Already exists
ubuntu:latest: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied
on to provide security.
Digest: sha256:fde8a8814702c18bb1f39b3bd91a2f82a8e428b1b4e39d1963c5d14418da8fba
Status: Downloaded newer image for ubuntu:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検索して最初に見つけたコマンドはディストリビューション名のみで取得していましたが、
バージョン指定してもう一度pullしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker pull ubuntu:vivid
vivid: Pulling from ubuntu
6e6a100fa147: Pull complete
13c0c663a321: Pull complete
2bd276ed39d5: Pull complete
013f3d01d247: Already exists
ubuntu:vivid: The image you are pulling has been verified. Important: image verification is a tech preview feature and should not be relied on to provide security.
Digest: sha256:950160a28b0d01358e9b9cc0c59ff90c094346ea97b357d499ef157541b603ed
Status: Downloaded newer image for ubuntu:vivid
$ docker images
REPOSITORY          TAG                 IMAGE ID            CREATED             VIRTUAL SIZE
ubuntu              vivid               013f3d01d247        2 days ago          131.4 MB
ubuntu              latest              91e54dfb1179        2 days ago          188.4 MB
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナを作成して確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker run -d -i -h docker-srv1 --name docker-srv1 ubuntu:vivid /bin/bash
d63d37d84f16112ad1da24130272173dd9e9c33dfc184ba0556304ceaace67d7
$ docker ps -a
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS                     PORTS               NAMES
d63d37d84f16        ubuntu:vivid        &quot;/bin/bash&quot;         4 seconds ago       Exited (0) 4 seconds ago                       docker-srv1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;dockerのオプションは&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;-d detach&lt;/li&gt;
  &lt;li&gt;-i interactive&lt;/li&gt;
  &lt;li&gt;-h ホスト名指定&lt;/li&gt;
  &lt;li&gt;–name コンテナ名&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;と、検索して見つかるオプションをつけましたが、正直のところどれが必要でどれが不要なのか…
どういう原理で動いているのかよくわかりませんね。&lt;/p&gt;

&lt;p&gt;起動しているコンテナに接続してみます。&lt;/p&gt;

&lt;p&gt;まず、先ほどのコンテナを起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker attach docker-srv1
root@docker-srv1:~# exit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しかし、attach後のシェルでexitするとコンテナが終了します。&lt;/p&gt;

&lt;p&gt;停止しているコンテナを起動するには、docker startを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker start docker-srv1
docker-srv1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以後、起動しているコンテナでシェルを操作する場合は以下のコマンドで実行可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker exec -it docker-srv1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上、コンテナの作成・起動を確認しました。&lt;/p&gt;

&lt;p&gt;次は各種用途に使用するためのイメージを作成するため、Dockerfileを作成してみようと思います。&lt;/p&gt;

</description>
                <link>/docker/2015/08/24/docker</link>
                <guid>/docker/2015/08/24/docker</guid>
                <pubDate>2015-08-24T00:00:00+09:00</pubDate>
        </item>


</channel>
</rss>
